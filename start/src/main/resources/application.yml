swagger:
  enable: true
  matchIfMissing: true
mybatis:
  mapper-locations: classpath:mappers/*xml
  type-aliases-package: com.example.boot.mybatis.entity
mybatis-plus:
  #外部化xml配置
  #config-location: classpath:mybatis-config.xml
  #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署
  #configuration-properties: classpath:mybatis/config.properties
  #xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:mappers/*xml
  #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名
  type-aliases-package: com.example.boot.mybatis.entity
  #如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象
  #type-aliases-super-type: java.lang.Object
  #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  #type-enums-package: com.baomidou.mybatisplus.samples.quickstart.enums
  #项目启动会检查xml配置存在(只在开发时候打开)
  check-config-location: true
  #SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句,REUSE：该执行器类型会复用预处理语句,BATCH：该执行器类型会批量执行所有的更新语句
  default-executor-type: REUSE
  configuration:
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    map-underscore-to-camel-case: false
    # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true
    cache-enabled: false
    #懒加载
    #aggressive-lazy-loading: true
    #NONE：不启用自动映射 PARTIAL：只对非嵌套的 resultMap 进行自动映射 FULL：对所有的 resultMap 都进行自动映射
    #auto-mapping-behavior: partial
    #NONE：不做任何处理 (默认值)WARNING：以日志的形式打印相关警告信息 FAILING：当作映射失败处理，并抛出异常和详细信息
    #auto-mapping-unknown-column-behavior: none
    #如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      #表名下划线命名默认true
      table-underline: true
      #id类型
      id-type: auto
      #是否开启大写命名，默认不开启
      #capital-mode: false
      #逻辑已删除值,(逻辑删除下有效) 需要注入逻辑策略LogicSqlInjector 以@Bean方式注入
      logic-not-delete-value: 0
      #逻辑未删除值,(逻辑删除下有效)
      logic-delete-value: 1
server:
  port: 8080
logging:
  level:
    org:
      springframework:
        web: TRACE
spring:
  application:
    name: boot
  redis:
    database: 0  # Redis数据库索引（默认为0）
    host: 127.0.0.1  # Redis服务器地址
    jedis:
      pool:
        max-active: 20  # 连接池最大连接数（使用负值表示没有限制）
        max-idle: 10   # 连接池中的最大空闲连接
        max-wait: -1   # 连接池最大阻塞等待时间（使用负值表示没有限制）
        min-idle: 0  # 连接池中的最小空闲连接
    password:        # Redis服务器连接密码（默认为空）
    port: 6379   # Redis服务器连接端口
    timeout: 1000  # 连接超时时间（毫秒）
  datasource:
    data: classpath:data.sql
    driver-class-name: com.mysql.cj.jdbc.Driver
    name: ntt
    password: root
    schema: classpath:schema.sql
    url: jdbc:mysql://localhost:3306/ntt?serverTimezone=UTC
    username: root
      # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
      # 配置获取连接等待超时的时间
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
    initialSize: 1
    minIdle: 3
    maxActive: 20
      # 配置获取连接等待超时的时间
    maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

  thymeleaf:
    cache: true
    check-template: true
    check-template-location: true
    content-type: text/html
    enabled: true
    encoding: UTF-8
    excluded-view-names: ''
    mode: HTML5
    prefix: classpath:/templates/
    suffix: .html


